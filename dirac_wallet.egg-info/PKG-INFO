Metadata-Version: 2.4
Name: dirac-wallet
Version: 0.1.0
Summary: Quantum-resistant cryptocurrency wallet for Solana
Home-page: https://github.com/diracsystems/dirac-crypto
Author: Dirac Crypto Team
Author-email: info@diracsystems.io
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: solana>=0.29.2
Requires-Dist: solders>=0.18.1
Requires-Dist: typer>=0.9.0
Requires-Dist: rich>=13.4.2
Requires-Dist: matplotlib>=3.7.1
Requires-Dist: pandas>=2.0.2
Requires-Dist: base58>=2.1.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Dirac Quantum-Resistant Wallet

A cryptocurrency wallet with post-quantum cryptographic protections for the Solana blockchain.

## Features

- **Quantum-Resistant Cryptography**: Uses hash-based and lattice-based signature schemes that are resistant to quantum computing attacks
- **Multi-Network Support**: Connect to Solana mainnet, testnet, devnet, or local networks
- **Backup and Recovery**: Built-in wallet backup and restoration capabilities
- **Transaction History**: Track and view transaction history for all wallets
- **Import/Export**: Easily import and export wallets with optional private key inclusion
- **Rich CLI Interface**: Beautiful and intuitive command-line interface

## Installation

### Prerequisites

- Python 3.8 or newer
- pip (Python package manager)

### Installing from Source

1. Clone the repository:
   ```
   git clone https://github.com/diracsystems/dirac-crypto.git
   cd dirac-crypto
   ```

2. Install the package:
   ```
   pip install -e .
   ```

## Usage

### Command-Line Interface

The Dirac wallet provides a rich command-line interface:

```
# Create a new wallet
dirac-wallet create my-wallet

# List all wallets
dirac-wallet list

# Check wallet balance
dirac-wallet balance my-wallet

# Request an airdrop (testnet/devnet only)
dirac-wallet airdrop my-wallet --amount 1.0

# Send SOL to another address
dirac-wallet send RECIPIENT_ADDRESS --amount 0.1 --wallet my-wallet

# View transaction history
dirac-wallet history my-wallet

# Change network
dirac-wallet network devnet --wallet my-wallet

# Export wallet (without private keys)
dirac-wallet export my-wallet --output ./exports

# Create a backup
dirac-wallet backup my-wallet

# Restore from backup
dirac-wallet restore my-wallet
```

### Using as a Library

You can also use Dirac as a Python library in your own projects:

```python
from dirac.wallet import DiracWallet
from dirac.crypto import QuantumKeyring

# Create a wallet with custom parameters
keyring = QuantumKeyring(
    signature_algorithm="sphincs",
    hash_algorithm="sha256",
    security_level=3
)

wallet = DiracWallet(keyring, network="testnet")

# Create a new wallet
address = wallet.create_wallet("my-wallet")
print(f"Created wallet with address: {address}")

# Get balance
balance = wallet.get_balance()
print(f"Wallet balance: {balance} SOL")
```

## Quantum Resistance

Dirac uses two primary quantum-resistant algorithms:

1. **SPHINCS+**: A stateless hash-based signature scheme that is a conservative choice for quantum resistance.

2. **Dilithium**: A lattice-based signature scheme that offers better performance with strong security guarantees.

Each wallet is created with a primary keypair and a backup keypair using a different algorithm for added security.

## Development Roadmap

### Phase 1: Complete Solana Integration
- [x] Keypair conversion between Dirac and Solana formats
- [x] Airdrop functionality for testnets
- [ ] Complete Solana transaction support

### Phase 2: Enhanced Security
- [ ] HD wallet support
- [ ] Enhanced quantum resistance with multiple algorithms
- [ ] Transaction signing with quantum-resistant signatures

### Phase 3: Advanced Features
- [ ] SPL Token support
- [ ] NFT integration
- [ ] Web interface

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details. 
